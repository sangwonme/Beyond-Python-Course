[
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "BertTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "BertModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "BertTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "BertModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "torch.nn.functional",
        "description": "torch.nn.functional",
        "isExtraImport": true,
        "detail": "torch.nn.functional",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "torch.nn.functional",
        "description": "torch.nn.functional",
        "isExtraImport": true,
        "detail": "torch.nn.functional",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "N = int(N)\ncommands = []\nfor _ in range(N):\n    commands.append(input())\n# directions and command type\ndx = [1, -1, 0, 0, 1, -1, 1, -1]\ndy = [0, 0, -1, 1, 1, 1, -1, -1]\ncommand_type = ['R', 'L', 'B', 'T', 'RT', 'LT', 'RB', 'LB']\n# convert corrdinate\nking_x = ord(king[0]) - ord('A')",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "commands",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "commands = []\nfor _ in range(N):\n    commands.append(input())\n# directions and command type\ndx = [1, -1, 0, 0, 1, -1, 1, -1]\ndy = [0, 0, -1, 1, 1, 1, -1, -1]\ncommand_type = ['R', 'L', 'B', 'T', 'RT', 'LT', 'RB', 'LB']\n# convert corrdinate\nking_x = ord(king[0]) - ord('A')\nking_y = int(king[1]) - 1",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "dx = [1, -1, 0, 0, 1, -1, 1, -1]\ndy = [0, 0, -1, 1, 1, 1, -1, -1]\ncommand_type = ['R', 'L', 'B', 'T', 'RT', 'LT', 'RB', 'LB']\n# convert corrdinate\nking_x = ord(king[0]) - ord('A')\nking_y = int(king[1]) - 1\ndol_x = ord(dol[0]) - ord('A')\ndol_y = int(dol[1]) - 1\n# move\nfor command in commands:",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "dy = [0, 0, -1, 1, 1, 1, -1, -1]\ncommand_type = ['R', 'L', 'B', 'T', 'RT', 'LT', 'RB', 'LB']\n# convert corrdinate\nking_x = ord(king[0]) - ord('A')\nking_y = int(king[1]) - 1\ndol_x = ord(dol[0]) - ord('A')\ndol_y = int(dol[1]) - 1\n# move\nfor command in commands:\n    # get dx dy",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "command_type",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "command_type = ['R', 'L', 'B', 'T', 'RT', 'LT', 'RB', 'LB']\n# convert corrdinate\nking_x = ord(king[0]) - ord('A')\nking_y = int(king[1]) - 1\ndol_x = ord(dol[0]) - ord('A')\ndol_y = int(dol[1]) - 1\n# move\nfor command in commands:\n    # get dx dy\n    idx = 0",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "king_x",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "king_x = ord(king[0]) - ord('A')\nking_y = int(king[1]) - 1\ndol_x = ord(dol[0]) - ord('A')\ndol_y = int(dol[1]) - 1\n# move\nfor command in commands:\n    # get dx dy\n    idx = 0\n    for i in range(len(command_type)):\n        if command_type[i] == command:",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "king_y",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "king_y = int(king[1]) - 1\ndol_x = ord(dol[0]) - ord('A')\ndol_y = int(dol[1]) - 1\n# move\nfor command in commands:\n    # get dx dy\n    idx = 0\n    for i in range(len(command_type)):\n        if command_type[i] == command:\n            idx = i",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "dol_x",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "dol_x = ord(dol[0]) - ord('A')\ndol_y = int(dol[1]) - 1\n# move\nfor command in commands:\n    # get dx dy\n    idx = 0\n    for i in range(len(command_type)):\n        if command_type[i] == command:\n            idx = i\n    # nx, ny",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "dol_y",
        "kind": 5,
        "importPath": "Algorithm.q1063",
        "description": "Algorithm.q1063",
        "peekOfCode": "dol_y = int(dol[1]) - 1\n# move\nfor command in commands:\n    # get dx dy\n    idx = 0\n    for i in range(len(command_type)):\n        if command_type[i] == command:\n            idx = i\n    # nx, ny\n    king_nx = king_x + dx[idx]",
        "detail": "Algorithm.q1063",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.q10709",
        "description": "Algorithm.q10709",
        "peekOfCode": "data = []\nfor i in range(H):\n    data.append(input())\n# init -1\nouput = []\nfor i in range(H):\n    line = []\n    for j in range(W):\n        line.append(-1)\n    ouput.append(line)",
        "detail": "Algorithm.q10709",
        "documentation": {}
    },
    {
        "label": "ouput",
        "kind": 5,
        "importPath": "Algorithm.q10709",
        "description": "Algorithm.q10709",
        "peekOfCode": "ouput = []\nfor i in range(H):\n    line = []\n    for j in range(W):\n        line.append(-1)\n    ouput.append(line)\nfor i in range(H):\n    cloud_found = False\n    # 이 줄에서 구름이 있었다면 num += 1 / 구름을 새로 찾으면 -1 대입\n    for j in range(W):",
        "detail": "Algorithm.q10709",
        "documentation": {}
    },
    {
        "label": "dirs",
        "kind": 5,
        "importPath": "Algorithm.q13567",
        "description": "Algorithm.q13567",
        "peekOfCode": "dirs = [[1,0], [0,1], [-1,0], [0,-1]]\ndir_idx = 0\npos = [0, 0]\nvalid = True\n# repeat n times\nfor i in range(n):\n    command = input().split()\n    if command[0] == 'MOVE':\n        pos[0] += (int(command[1]) * dirs[dir_idx][0])\n        pos[1] += (int(command[1]) * dirs[dir_idx][1])",
        "detail": "Algorithm.q13567",
        "documentation": {}
    },
    {
        "label": "dir_idx",
        "kind": 5,
        "importPath": "Algorithm.q13567",
        "description": "Algorithm.q13567",
        "peekOfCode": "dir_idx = 0\npos = [0, 0]\nvalid = True\n# repeat n times\nfor i in range(n):\n    command = input().split()\n    if command[0] == 'MOVE':\n        pos[0] += (int(command[1]) * dirs[dir_idx][0])\n        pos[1] += (int(command[1]) * dirs[dir_idx][1])\n    elif command[0] == 'TURN':",
        "detail": "Algorithm.q13567",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "Algorithm.q13567",
        "description": "Algorithm.q13567",
        "peekOfCode": "pos = [0, 0]\nvalid = True\n# repeat n times\nfor i in range(n):\n    command = input().split()\n    if command[0] == 'MOVE':\n        pos[0] += (int(command[1]) * dirs[dir_idx][0])\n        pos[1] += (int(command[1]) * dirs[dir_idx][1])\n    elif command[0] == 'TURN':\n        if int(command[1]) == 0:",
        "detail": "Algorithm.q13567",
        "documentation": {}
    },
    {
        "label": "valid",
        "kind": 5,
        "importPath": "Algorithm.q13567",
        "description": "Algorithm.q13567",
        "peekOfCode": "valid = True\n# repeat n times\nfor i in range(n):\n    command = input().split()\n    if command[0] == 'MOVE':\n        pos[0] += (int(command[1]) * dirs[dir_idx][0])\n        pos[1] += (int(command[1]) * dirs[dir_idx][1])\n    elif command[0] == 'TURN':\n        if int(command[1]) == 0:\n            dir_idx = (dir_idx + 1) % 4",
        "detail": "Algorithm.q13567",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "data = []\nfor i in range(N):\n    data.append(list(map(int, input().split())))\n# directions\ndy = [-1, 0, 1, 0]\ndx = [0, 1, 0, -1]\n# clean\nclean = []\nfor i in range(N):\n    row = []",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "dy = [-1, 0, 1, 0]\ndx = [0, 1, 0, -1]\n# clean\nclean = []\nfor i in range(N):\n    row = []\n    for j in range(M):\n        row.append(False)\n    clean.append(row)\n# ans",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "dx = [0, 1, 0, -1]\n# clean\nclean = []\nfor i in range(N):\n    row = []\n    for j in range(M):\n        row.append(False)\n    clean.append(row)\n# ans\ncnt = 0",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "clean = []\nfor i in range(N):\n    row = []\n    for j in range(M):\n        row.append(False)\n    clean.append(row)\n# ans\ncnt = 0\n# simulate\ny = r",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "cnt = 0\n# simulate\ny = r\nx = c\ndir = d\nwhile True:\n    # print('------------------')\n    # print('Y, X: ', y, x)\n    # for i in range(N):\n    #     for j in range(M):",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "y = r\nx = c\ndir = d\nwhile True:\n    # print('------------------')\n    # print('Y, X: ', y, x)\n    # for i in range(N):\n    #     for j in range(M):\n    #         print(int(clean[i][j]), end = ' ')\n    #     print()",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "x = c\ndir = d\nwhile True:\n    # print('------------------')\n    # print('Y, X: ', y, x)\n    # for i in range(N):\n    #     for j in range(M):\n    #         print(int(clean[i][j]), end = ' ')\n    #     print()\n    # Step 1: Not clean -> clean",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "dir",
        "kind": 5,
        "importPath": "Algorithm.q14503",
        "description": "Algorithm.q14503",
        "peekOfCode": "dir = d\nwhile True:\n    # print('------------------')\n    # print('Y, X: ', y, x)\n    # for i in range(N):\n    #     for j in range(M):\n    #         print(int(clean[i][j]), end = ' ')\n    #     print()\n    # Step 1: Not clean -> clean\n    if not clean[y][x]:",
        "detail": "Algorithm.q14503",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.q15501",
        "description": "Algorithm.q15501",
        "peekOfCode": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n# Search A[0]'s pos in B\npos = 0\nfor i in range(N):\n    if B[i] == A[0]:\n        pos = i\n        break\n# check if B is reversed",
        "detail": "Algorithm.q15501",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "Algorithm.q15501",
        "description": "Algorithm.q15501",
        "peekOfCode": "A = list(map(int, input().split()))\nB = list(map(int, input().split()))\n# Search A[0]'s pos in B\npos = 0\nfor i in range(N):\n    if B[i] == A[0]:\n        pos = i\n        break\n# check if B is reversed\nreverse = False",
        "detail": "Algorithm.q15501",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "Algorithm.q15501",
        "description": "Algorithm.q15501",
        "peekOfCode": "B = list(map(int, input().split()))\n# Search A[0]'s pos in B\npos = 0\nfor i in range(N):\n    if B[i] == A[0]:\n        pos = i\n        break\n# check if B is reversed\nreverse = False\nif B[(pos+1)%N] == A[-1]:",
        "detail": "Algorithm.q15501",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "Algorithm.q15501",
        "description": "Algorithm.q15501",
        "peekOfCode": "pos = 0\nfor i in range(N):\n    if B[i] == A[0]:\n        pos = i\n        break\n# check if B is reversed\nreverse = False\nif B[(pos+1)%N] == A[-1]:\n    reverse = True\n# traverse and check if same",
        "detail": "Algorithm.q15501",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 5,
        "importPath": "Algorithm.q15501",
        "description": "Algorithm.q15501",
        "peekOfCode": "reverse = False\nif B[(pos+1)%N] == A[-1]:\n    reverse = True\n# traverse and check if same\nvalid = True\nfor i in range(N):\n    if reverse:\n        if A[i] != B[(pos-i)%N]:\n            valid = False\n    else:",
        "detail": "Algorithm.q15501",
        "documentation": {}
    },
    {
        "label": "valid",
        "kind": 5,
        "importPath": "Algorithm.q15501",
        "description": "Algorithm.q15501",
        "peekOfCode": "valid = True\nfor i in range(N):\n    if reverse:\n        if A[i] != B[(pos-i)%N]:\n            valid = False\n    else:\n        if A[i] != B[(pos+i)%N]:\n            valid = False\nif valid:\n    print('good puzzle')",
        "detail": "Algorithm.q15501",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.q1652",
        "description": "Algorithm.q1652",
        "peekOfCode": "N = int(input())\ndata = []\nfor _ in range(N):\n    data.append(input())\n# horizontal\nhorizontal = 0\nfor i in range(N):\n    space = 0\n    for j in range(N):\n        if data[i][j] == '.':",
        "detail": "Algorithm.q1652",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.q1652",
        "description": "Algorithm.q1652",
        "peekOfCode": "data = []\nfor _ in range(N):\n    data.append(input())\n# horizontal\nhorizontal = 0\nfor i in range(N):\n    space = 0\n    for j in range(N):\n        if data[i][j] == '.':\n            space += 1",
        "detail": "Algorithm.q1652",
        "documentation": {}
    },
    {
        "label": "horizontal",
        "kind": 5,
        "importPath": "Algorithm.q1652",
        "description": "Algorithm.q1652",
        "peekOfCode": "horizontal = 0\nfor i in range(N):\n    space = 0\n    for j in range(N):\n        if data[i][j] == '.':\n            space += 1\n        else:\n            space = 0\n        if space == 2:\n            horizontal += 1",
        "detail": "Algorithm.q1652",
        "documentation": {}
    },
    {
        "label": "vertical",
        "kind": 5,
        "importPath": "Algorithm.q1652",
        "description": "Algorithm.q1652",
        "peekOfCode": "vertical = 0\nfor j in range(N):\n    space = 0\n    for i in range(N):\n        if data[i][j] == '.':\n            space += 1\n        else:\n            space = 0\n        if space == 2:\n            vertical += 1",
        "detail": "Algorithm.q1652",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.q16918",
        "description": "Algorithm.q16918",
        "peekOfCode": "data = []\nfor _ in range(R):\n    data.append(list(input()))\n# init time\ntime = []\nfor i in range(R):\n    row = []\n    for j in range(C):\n        if data[i][j] == '.':\n            row.append(0)",
        "detail": "Algorithm.q16918",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "Algorithm.q16918",
        "description": "Algorithm.q16918",
        "peekOfCode": "time = []\nfor i in range(R):\n    row = []\n    for j in range(C):\n        if data[i][j] == '.':\n            row.append(0)\n        elif data[i][j] == 'O':\n            row.append(2)\n    time.append(row)\n# direction",
        "detail": "Algorithm.q16918",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Algorithm.q16918",
        "description": "Algorithm.q16918",
        "peekOfCode": "dx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]\n# simulation\nfor n in range(N-1):\n    explosion = []\n    for i in range(R):\n        for j in range(C):\n            # case time = 1 -> set bomb = increase time\n            # case time = 2 -> increase time\n            if time[i][j] <= 2:",
        "detail": "Algorithm.q16918",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Algorithm.q16918",
        "description": "Algorithm.q16918",
        "peekOfCode": "dy = [0, 0, -1, 1]\n# simulation\nfor n in range(N-1):\n    explosion = []\n    for i in range(R):\n        for j in range(C):\n            # case time = 1 -> set bomb = increase time\n            # case time = 2 -> increase time\n            if time[i][j] <= 2:\n                time[i][j] += 1",
        "detail": "Algorithm.q16918",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.q17251",
        "description": "Algorithm.q17251",
        "peekOfCode": "N = int(input())\ndata = list(map(int, input().split()))\nmax_value, left, right = 0, 0, 0\nfor i in range(N):\n    if data[i] > max_value:\n        max_value = data[i]\n        left = i\n        right = i\n    elif data[i] == max_value:\n        right = i",
        "detail": "Algorithm.q17251",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.q17251",
        "description": "Algorithm.q17251",
        "peekOfCode": "data = list(map(int, input().split()))\nmax_value, left, right = 0, 0, 0\nfor i in range(N):\n    if data[i] > max_value:\n        max_value = data[i]\n        left = i\n        right = i\n    elif data[i] == max_value:\n        right = i\nleft_length = left",
        "detail": "Algorithm.q17251",
        "documentation": {}
    },
    {
        "label": "left_length",
        "kind": 5,
        "importPath": "Algorithm.q17251",
        "description": "Algorithm.q17251",
        "peekOfCode": "left_length = left\nright_length = N - 1 - right\nif left_length > right_length:\n    print('B')\nelif right_length > left_length:\n    print('R')\nelse:\n    print('X')",
        "detail": "Algorithm.q17251",
        "documentation": {}
    },
    {
        "label": "right_length",
        "kind": 5,
        "importPath": "Algorithm.q17251",
        "description": "Algorithm.q17251",
        "peekOfCode": "right_length = N - 1 - right\nif left_length > right_length:\n    print('B')\nelif right_length > left_length:\n    print('R')\nelse:\n    print('X')",
        "detail": "Algorithm.q17251",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.q18242",
        "description": "Algorithm.q18242",
        "peekOfCode": "data = []\nfor _ in range(N):\n    data.append(input())\nans = ''\n# left / right idx\nleft = -1\nright = -1\nfor i in range(N):\n    for j in range(M):\n        if left == -1 and data[i][j] == '#':",
        "detail": "Algorithm.q18242",
        "documentation": {}
    },
    {
        "label": "ans",
        "kind": 5,
        "importPath": "Algorithm.q18242",
        "description": "Algorithm.q18242",
        "peekOfCode": "ans = ''\n# left / right idx\nleft = -1\nright = -1\nfor i in range(N):\n    for j in range(M):\n        if left == -1 and data[i][j] == '#':\n            left = j\n        if left != -1 and data[i][j] == '#':\n            right = j",
        "detail": "Algorithm.q18242",
        "documentation": {}
    },
    {
        "label": "left",
        "kind": 5,
        "importPath": "Algorithm.q18242",
        "description": "Algorithm.q18242",
        "peekOfCode": "left = -1\nright = -1\nfor i in range(N):\n    for j in range(M):\n        if left == -1 and data[i][j] == '#':\n            left = j\n        if left != -1 and data[i][j] == '#':\n            right = j\n    if left != -1 and right != -1:\n        break",
        "detail": "Algorithm.q18242",
        "documentation": {}
    },
    {
        "label": "right",
        "kind": 5,
        "importPath": "Algorithm.q18242",
        "description": "Algorithm.q18242",
        "peekOfCode": "right = -1\nfor i in range(N):\n    for j in range(M):\n        if left == -1 and data[i][j] == '#':\n            left = j\n        if left != -1 and data[i][j] == '#':\n            right = j\n    if left != -1 and right != -1:\n        break\n# iterate in rows",
        "detail": "Algorithm.q18242",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "Algorithm.q20055",
        "description": "Algorithm.q20055",
        "peekOfCode": "A = list(map(int, input().split()))\nrobot = [False] * N\nresult = 0\nwhile True:\n    result += 1\n    # 1. rotate belt and robot (A도 slicing으로 회전)\n    A = [A[-1]] + A[:-1]\n    robot = [False] + robot[:-1]\n    robot[-1] = False\n    # 2. move the robots",
        "detail": "Algorithm.q20055",
        "documentation": {}
    },
    {
        "label": "robot",
        "kind": 5,
        "importPath": "Algorithm.q20055",
        "description": "Algorithm.q20055",
        "peekOfCode": "robot = [False] * N\nresult = 0\nwhile True:\n    result += 1\n    # 1. rotate belt and robot (A도 slicing으로 회전)\n    A = [A[-1]] + A[:-1]\n    robot = [False] + robot[:-1]\n    robot[-1] = False\n    # 2. move the robots\n    for i in range(N - 1):",
        "detail": "Algorithm.q20055",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithm.q20055",
        "description": "Algorithm.q20055",
        "peekOfCode": "result = 0\nwhile True:\n    result += 1\n    # 1. rotate belt and robot (A도 slicing으로 회전)\n    A = [A[-1]] + A[:-1]\n    robot = [False] + robot[:-1]\n    robot[-1] = False\n    # 2. move the robots\n    for i in range(N - 1):\n        idx = N-2-i",
        "detail": "Algorithm.q20055",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.q25707",
        "description": "Algorithm.q25707",
        "peekOfCode": "N = int(input())\ndata = list(map(int, input().split()))\ndata.sort()\nprint(2*(data[-1]-data[0]))",
        "detail": "Algorithm.q25707",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.q25707",
        "description": "Algorithm.q25707",
        "peekOfCode": "data = list(map(int, input().split()))\ndata.sort()\nprint(2*(data[-1]-data[0]))",
        "detail": "Algorithm.q25707",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.q25918",
        "description": "Algorithm.q25918",
        "peekOfCode": "N = int(input())\nS = input()\n# init\nmax_size = 0 # measure the max_size of the stack\nstack = []\n# stack operation\nfor c in S:\n    # if popable -> pop\n    if len(stack) > 0 and stack[-1] != c:\n        stack.pop()",
        "detail": "Algorithm.q25918",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "Algorithm.q25918",
        "description": "Algorithm.q25918",
        "peekOfCode": "S = input()\n# init\nmax_size = 0 # measure the max_size of the stack\nstack = []\n# stack operation\nfor c in S:\n    # if popable -> pop\n    if len(stack) > 0 and stack[-1] != c:\n        stack.pop()\n    # else -> push and update max_size",
        "detail": "Algorithm.q25918",
        "documentation": {}
    },
    {
        "label": "max_size",
        "kind": 5,
        "importPath": "Algorithm.q25918",
        "description": "Algorithm.q25918",
        "peekOfCode": "max_size = 0 # measure the max_size of the stack\nstack = []\n# stack operation\nfor c in S:\n    # if popable -> pop\n    if len(stack) > 0 and stack[-1] != c:\n        stack.pop()\n    # else -> push and update max_size\n    else:\n        stack.append(c)",
        "detail": "Algorithm.q25918",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "Algorithm.q25918",
        "description": "Algorithm.q25918",
        "peekOfCode": "stack = []\n# stack operation\nfor c in S:\n    # if popable -> pop\n    if len(stack) > 0 and stack[-1] != c:\n        stack.pop()\n    # else -> push and update max_size\n    else:\n        stack.append(c)\n        if max_size < len(stack):",
        "detail": "Algorithm.q25918",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "Algorithm.q30704",
        "description": "Algorithm.q30704",
        "peekOfCode": "T = int(input())\nfor _ in range(T):\n    num = int(input())\n    x = math.sqrt(num)\n    print(2 * (math.floor(x) + math.ceil(num / math.floor(x))))",
        "detail": "Algorithm.q30704",
        "documentation": {}
    },
    {
        "label": "cows",
        "kind": 5,
        "importPath": "Algorithm.q31063",
        "description": "Algorithm.q31063",
        "peekOfCode": "cows = list(map(int, input().split()))\ncandies = list(map(int, input().split()))\n# candies -> [6, 1, 3] => [[0, 6], [0, 1], [0, 3]]\nfor i in range(len(candies)):\n    candies[i] = [0, candies[i]]\n# simulation\nfor i in range(len(candies)):\n    for j in range(len(cows)):\n        # break if no candy\n        if candies[i][1] == candies[i][0]:",
        "detail": "Algorithm.q31063",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 5,
        "importPath": "Algorithm.q31063",
        "description": "Algorithm.q31063",
        "peekOfCode": "candies = list(map(int, input().split()))\n# candies -> [6, 1, 3] => [[0, 6], [0, 1], [0, 3]]\nfor i in range(len(candies)):\n    candies[i] = [0, candies[i]]\n# simulation\nfor i in range(len(candies)):\n    for j in range(len(cows)):\n        # break if no candy\n        if candies[i][1] == candies[i][0]:\n            break",
        "detail": "Algorithm.q31063",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.q5600",
        "description": "Algorithm.q5600",
        "peekOfCode": "N = int(input())\ntest = []\nfor _ in range(N):\n    test.append(list(map(int, input().split())))\n# Initiate result with unknown state (2) - 1 indexing\nresult = [2] * (A+B+C+1)\n# Check the well-working\nfor i in range(N):\n    if test[i][3] == 1:\n        for j in range(3):",
        "detail": "Algorithm.q5600",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "Algorithm.q5600",
        "description": "Algorithm.q5600",
        "peekOfCode": "test = []\nfor _ in range(N):\n    test.append(list(map(int, input().split())))\n# Initiate result with unknown state (2) - 1 indexing\nresult = [2] * (A+B+C+1)\n# Check the well-working\nfor i in range(N):\n    if test[i][3] == 1:\n        for j in range(3):\n            result[test[i][j]] = 1",
        "detail": "Algorithm.q5600",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithm.q5600",
        "description": "Algorithm.q5600",
        "peekOfCode": "result = [2] * (A+B+C+1)\n# Check the well-working\nfor i in range(N):\n    if test[i][3] == 1:\n        for j in range(3):\n            result[test[i][j]] = 1\n# Check if there are brokens\nfor i in range(N):\n    if test[i][3] == 0:\n        # If there are 2 working, then remaining one is broken",
        "detail": "Algorithm.q5600",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "Algorithm.q8911",
        "description": "Algorithm.q8911",
        "peekOfCode": "T = int(input())\nfor _ in range(T):\n    # command input\n    command = input()\n    # init\n    dirs = [[0,1], [-1,0], [0,-1], [1,0]]\n    dir_idx = 0\n    pos = [0,0]\n    x_min, x_max, y_min, y_max = 0, 0, 0, 0\n    # simulate for every command",
        "detail": "Algorithm.q8911",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "Algorithm.q9012",
        "description": "Algorithm.q9012",
        "peekOfCode": "T = int(input())\nfor _ in range(T):\n    data = input()\n    ans = 'YES'\n    cnt = 0\n    for char in data:\n        if char == '(':\n            cnt += 1\n        elif char == ')':\n            cnt -= 1",
        "detail": "Algorithm.q9012",
        "documentation": {}
    },
    {
        "label": "get_mismatch_count",
        "kind": 2,
        "importPath": "Algorithm.usaco25feb1",
        "description": "Algorithm.usaco25feb1",
        "peekOfCode": "def get_mismatch_count(grid, N):\n    \"\"\"Calculate the number of operations needed to restore symmetry.\"\"\"\n    mismatch_count = 0\n    half_N = N // 2\n    for i in range(half_N):\n        for j in range(half_N, N):\n            mirror_i = N - 1 - i\n            mirror_j = N - 1 - j\n            top_right = grid[i][j]\n            bottom_right = grid[mirror_i][j]",
        "detail": "Algorithm.usaco25feb1",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "Algorithm.usaco25feb1",
        "description": "Algorithm.usaco25feb1",
        "peekOfCode": "grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n# Calculate initial mismatches\nmismatch_count = get_mismatch_count(grid, N)\nprint(mismatch_count)\n# Process updates\nfor _ in range(U):\n    r, c = map(int, sys.stdin.readline().split())\n    r -= 1\n    c -= 1\n    # Toggle the cell",
        "detail": "Algorithm.usaco25feb1",
        "documentation": {}
    },
    {
        "label": "mismatch_count",
        "kind": 5,
        "importPath": "Algorithm.usaco25feb1",
        "description": "Algorithm.usaco25feb1",
        "peekOfCode": "mismatch_count = get_mismatch_count(grid, N)\nprint(mismatch_count)\n# Process updates\nfor _ in range(U):\n    r, c = map(int, sys.stdin.readline().split())\n    r -= 1\n    c -= 1\n    # Toggle the cell\n    grid[r][c] = '#' if grid[r][c] == '.' else '.'\n    # Recalculate mismatch count",
        "detail": "Algorithm.usaco25feb1",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.usaco25feb2",
        "description": "Algorithm.usaco25feb2",
        "peekOfCode": "N = int(input())\ndata = list(map(int, input().split()))\ndata.sort()\n# max value\nmax_value = data[-1]",
        "detail": "Algorithm.usaco25feb2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Algorithm.usaco25feb2",
        "description": "Algorithm.usaco25feb2",
        "peekOfCode": "data = list(map(int, input().split()))\ndata.sort()\n# max value\nmax_value = data[-1]",
        "detail": "Algorithm.usaco25feb2",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "Algorithm.usaco25feb2",
        "description": "Algorithm.usaco25feb2",
        "peekOfCode": "max_value = data[-1]",
        "detail": "Algorithm.usaco25feb2",
        "documentation": {}
    },
    {
        "label": "count_stars_before_shift",
        "kind": 2,
        "importPath": "Algorithm.usaco25jan1",
        "description": "Algorithm.usaco25jan1",
        "peekOfCode": "def count_stars_before_shift(t, test_cases):\n    results = []\n    for case in test_cases:\n        n, a, b, grid = case\n        stars = set()\n        # Process the grid\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 'B':\n                    # Black pixel, must overlap in both photos",
        "detail": "Algorithm.usaco25jan1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Algorithm.usaco25jan1",
        "description": "Algorithm.usaco25jan1",
        "peekOfCode": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    T = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(T):\n        n, a, b = map(int, data[index].split())\n        index += 1",
        "detail": "Algorithm.usaco25jan1",
        "documentation": {}
    },
    {
        "label": "count_cows",
        "kind": 2,
        "importPath": "Algorithm.usaco25jan3",
        "description": "Algorithm.usaco25jan3",
        "peekOfCode": "def count_cows(N, a, b):\n    # 결과 저장 배열\n    results = [0] * (N + 1)\n    # 현재 상태에서 a[i] == b[i]인 경우 체크\n    original_matches = [1 if a[i] == b[i] else 0 for i in range(N)]\n    original_count = sum(original_matches)\n    # 모든 l, r에 대해 검진받는 소의 수 계산\n    for l in range(N):\n        current_matches = original_count\n        for r in range(l, N):",
        "detail": "Algorithm.usaco25jan3",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Algorithm.usaco25jan3",
        "description": "Algorithm.usaco25jan3",
        "peekOfCode": "N = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n# 실행\noutput = count_cows(N, a, b)\nfor result in output:\n    print(result)",
        "detail": "Algorithm.usaco25jan3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Algorithm.usaco25jan3",
        "description": "Algorithm.usaco25jan3",
        "peekOfCode": "a = list(map(int, input().split()))\nb = list(map(int, input().split()))\n# 실행\noutput = count_cows(N, a, b)\nfor result in output:\n    print(result)",
        "detail": "Algorithm.usaco25jan3",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Algorithm.usaco25jan3",
        "description": "Algorithm.usaco25jan3",
        "peekOfCode": "b = list(map(int, input().split()))\n# 실행\noutput = count_cows(N, a, b)\nfor result in output:\n    print(result)",
        "detail": "Algorithm.usaco25jan3",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "Algorithm.usaco25jan3",
        "description": "Algorithm.usaco25jan3",
        "peekOfCode": "output = count_cows(N, a, b)\nfor result in output:\n    print(result)",
        "detail": "Algorithm.usaco25jan3",
        "documentation": {}
    },
    {
        "label": "exchange_rates",
        "kind": 5,
        "importPath": "Answers.wallet_answer",
        "description": "Answers.wallet_answer",
        "peekOfCode": "exchange_rates = {\n    'USD': {'EUR': 0.95, 'GBP': 0.82, 'JPY': 140.5, 'USD': 1, 'KRW': 1300},\n    'EUR': {'USD': 1.05, 'GBP': 0.86, 'JPY': 147.9, 'EUR': 1, 'KRW': 1365},\n    'GBP': {'USD': 1.22, 'EUR': 1.16, 'JPY': 171.8, 'GBP': 1, 'KRW': 1583},\n    'JPY': {'USD': 0.0071, 'EUR': 0.0068, 'GBP': 0.0058, 'JPY': 1, 'KRW': 9.2},\n    'KRW': {'USD': 0.00077, 'EUR': 0.00073, 'GBP': 0.00063, 'JPY': 0.11, 'KRW': 1}\n}\n# Initialize wallet in session state if it does not exist\nif 'wallet' not in st.session_state:\n    st.session_state['wallet'] = {currency: 0 for currency in exchange_rates}",
        "detail": "Answers.wallet_answer",
        "documentation": {}
    },
    {
        "label": "operation",
        "kind": 5,
        "importPath": "Answers.wallet_answer",
        "description": "Answers.wallet_answer",
        "peekOfCode": "operation = st.selectbox(\"Choose Operation\", (\"deposit\", \"withdraw\", \"exchange\"))\namount = st.number_input(\"Amount\", min_value=0.0, format=\"%f\")\ncurrency = st.selectbox(\"Currency\", options=list(exchange_rates.keys()))\nif operation == \"exchange\":\n    target_currency = st.selectbox(\"Target Currency\", options=list(exchange_rates.keys()))\n    if st.button(\"Execute Exchange\"):\n        if amount > 0 and st.session_state['wallet'][currency] >= amount:\n            exchanged_amount = amount * exchange_rates[currency][target_currency]\n            st.session_state['wallet'][currency] -= amount\n            st.session_state['wallet'][target_currency] += exchanged_amount",
        "detail": "Answers.wallet_answer",
        "documentation": {}
    },
    {
        "label": "amount",
        "kind": 5,
        "importPath": "Answers.wallet_answer",
        "description": "Answers.wallet_answer",
        "peekOfCode": "amount = st.number_input(\"Amount\", min_value=0.0, format=\"%f\")\ncurrency = st.selectbox(\"Currency\", options=list(exchange_rates.keys()))\nif operation == \"exchange\":\n    target_currency = st.selectbox(\"Target Currency\", options=list(exchange_rates.keys()))\n    if st.button(\"Execute Exchange\"):\n        if amount > 0 and st.session_state['wallet'][currency] >= amount:\n            exchanged_amount = amount * exchange_rates[currency][target_currency]\n            st.session_state['wallet'][currency] -= amount\n            st.session_state['wallet'][target_currency] += exchanged_amount\n        else:",
        "detail": "Answers.wallet_answer",
        "documentation": {}
    },
    {
        "label": "currency",
        "kind": 5,
        "importPath": "Answers.wallet_answer",
        "description": "Answers.wallet_answer",
        "peekOfCode": "currency = st.selectbox(\"Currency\", options=list(exchange_rates.keys()))\nif operation == \"exchange\":\n    target_currency = st.selectbox(\"Target Currency\", options=list(exchange_rates.keys()))\n    if st.button(\"Execute Exchange\"):\n        if amount > 0 and st.session_state['wallet'][currency] >= amount:\n            exchanged_amount = amount * exchange_rates[currency][target_currency]\n            st.session_state['wallet'][currency] -= amount\n            st.session_state['wallet'][target_currency] += exchanged_amount\n        else:\n            st.error(\"Insufficient balance or invalid amount\")",
        "detail": "Answers.wallet_answer",
        "documentation": {}
    },
    {
        "label": "agree",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "agree = st.checkbox('I agree')\nif agree:\n    st.write('Great!')\n# # Toggle\ncctv = st.toggle('CCTV')\ntv = st.toggle('TV')\nac = st.toggle('AC')\nlight = st.toggle('LIGHT')\nst.write('Switch ON: ')\nif cctv:",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "cctv",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "cctv = st.toggle('CCTV')\ntv = st.toggle('TV')\nac = st.toggle('AC')\nlight = st.toggle('LIGHT')\nst.write('Switch ON: ')\nif cctv:\n    st.write('CCTV is on')\nif tv:\n    st.write('TV is on')\nif ac:",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "tv",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "tv = st.toggle('TV')\nac = st.toggle('AC')\nlight = st.toggle('LIGHT')\nst.write('Switch ON: ')\nif cctv:\n    st.write('CCTV is on')\nif tv:\n    st.write('TV is on')\nif ac:\n    st.write('AC is on')",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "ac",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "ac = st.toggle('AC')\nlight = st.toggle('LIGHT')\nst.write('Switch ON: ')\nif cctv:\n    st.write('CCTV is on')\nif tv:\n    st.write('TV is on')\nif ac:\n    st.write('AC is on')\nif light:",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "light",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "light = st.toggle('LIGHT')\nst.write('Switch ON: ')\nif cctv:\n    st.write('CCTV is on')\nif tv:\n    st.write('TV is on')\nif ac:\n    st.write('AC is on')\nif light:\n    st.write('LIGHT is on')",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "option = st.selectbox(\n    'How would you like to be contacted?',\n    ['Email', 'Home phone', 'Mobile phone'])\nst.write('You selected:', option)\n# # Multiselect\nprice = {\n    'apple': 30,\n    'banana': 20,\n    'grape': 50\n}",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "price = {\n    'apple': 30,\n    'banana': 20,\n    'grape': 50\n}\noptions = st.multiselect(\n    'What fruits do you want to buy?',\n    ['apple', 'banana', 'grape'],\n)\ntotal = 0",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "options = st.multiselect(\n    'What fruits do you want to buy?',\n    ['apple', 'banana', 'grape'],\n)\ntotal = 0\nfor fruit in options:\n    total += price[fruit]\nst.write('Price: ', total)\n# Slider\nage = st.slider('How old are you?', 0, 130, 25)",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "total = 0\nfor fruit in options:\n    total += price[fruit]\nst.write('Price: ', total)\n# Slider\nage = st.slider('How old are you?', 0, 130, 25)\nst.write(\"I'm \", age, 'years old')\n# Text Input\ntitle = st.text_input('Movie title', 'Life of Brian')\nst.write('The current movie title is', title)",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "age = st.slider('How old are you?', 0, 130, 25)\nst.write(\"I'm \", age, 'years old')\n# Text Input\ntitle = st.text_input('Movie title', 'Life of Brian')\nst.write('The current movie title is', title)\n# Number Input\nnumber = st.number_input('Insert a number')\nst.write('The current number is ', number)",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "title = st.text_input('Movie title', 'Life of Brian')\nst.write('The current movie title is', title)\n# Number Input\nnumber = st.number_input('Insert a number')\nst.write('The current number is ', number)",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "description": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "peekOfCode": "number = st.number_input('Insert a number')\nst.write('The current number is ', number)",
        "detail": "Software.CH1-UI-Design.1_streamlit-inputUI.tv",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.example",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.example",
        "peekOfCode": "count = 0  # 매번 실행될 때마다 count가 초기화됨\nif st.button(\"Increase\"):\n    count += 10\nst.write(\"Count:\", count)",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.example",
        "documentation": {}
    },
    {
        "label": "display_library",
        "kind": 2,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "peekOfCode": "def display_library():\n    print(st.session_state['library'])\nwith st.form(\"Library Form\"):\n    title = st.text_input(\"Title\")\n    author = st.text_input(\"Author\")\n    year = st.number_input(\"Year\", min_value=1000, max_value=9999, step=1, format=\"%d\")\n    submit_button = st.form_submit_button(\"Submit\")\n    if submit_button:\n        pass\n        # TODO: call add_book",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "peekOfCode": "search = st.text_input(\"Search Book by Title\")\nif st.button(\"Search\"):\n    pass\n    # TODO: call search_book()\nremove = st.text_input(\"Remove Book by Title\")\nif st.button(\"Remove Book\"):\n    pass\n    # TODO: remove_book()",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "documentation": {}
    },
    {
        "label": "remove",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "peekOfCode": "remove = st.text_input(\"Remove Book by Title\")\nif st.button(\"Remove Book\"):\n    pass\n    # TODO: remove_book()",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.library",
        "documentation": {}
    },
    {
        "label": "exchange_rates",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "peekOfCode": "exchange_rates = {\n    'USD': {'EUR': 0.95, 'GBP': 0.82, 'JPY': 140.5, 'USD': 1, 'KRW': 1300},\n    'EUR': {'USD': 1.05, 'GBP': 0.86, 'JPY': 147.9, 'EUR': 1, 'KRW': 1365},\n    'GBP': {'USD': 1.22, 'EUR': 1.16, 'JPY': 171.8, 'GBP': 1, 'KRW': 1583},\n    'JPY': {'USD': 0.0071, 'EUR': 0.0068, 'GBP': 0.0058, 'JPY': 1, 'KRW': 9.2},\n    'KRW': {'USD': 0.00077, 'EUR': 0.00073, 'GBP': 0.00063, 'JPY': 0.11, 'KRW': 1}\n}\n# Initialize wallet in session state if it does not exist\nif 'wallet' not in st.session_state:\n    st.session_state['wallet'] = {currency: 0 for currency in exchange_rates}",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "documentation": {}
    },
    {
        "label": "operation",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "peekOfCode": "operation = st.selectbox(\"Choose Operation\", (\"deposit\", \"withdraw\", \"exchange\"))\namount = st.number_input(\"Amount\", min_value=0.0, format=\"%f\")\ncurrency = st.selectbox(\"Currency\", options=list(exchange_rates.keys()))\nif operation == \"exchange\":\n    target_currency = st.selectbox(\"Target Currency\", options=list(exchange_rates.keys()))\n    if st.button(\"Execute Exchange\"):\n        pass\n        # TODO\nelse:\n    if st.button(f\"{operation.title()} {amount} {currency}\"):",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "documentation": {}
    },
    {
        "label": "amount",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "peekOfCode": "amount = st.number_input(\"Amount\", min_value=0.0, format=\"%f\")\ncurrency = st.selectbox(\"Currency\", options=list(exchange_rates.keys()))\nif operation == \"exchange\":\n    target_currency = st.selectbox(\"Target Currency\", options=list(exchange_rates.keys()))\n    if st.button(\"Execute Exchange\"):\n        pass\n        # TODO\nelse:\n    if st.button(f\"{operation.title()} {amount} {currency}\"):\n        if operation == \"deposit\":",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "documentation": {}
    },
    {
        "label": "currency",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "description": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "peekOfCode": "currency = st.selectbox(\"Currency\", options=list(exchange_rates.keys()))\nif operation == \"exchange\":\n    target_currency = st.selectbox(\"Target Currency\", options=list(exchange_rates.keys()))\n    if st.button(\"Execute Exchange\"):\n        pass\n        # TODO\nelse:\n    if st.button(f\"{operation.title()} {amount} {currency}\"):\n        if operation == \"deposit\":\n            pass",
        "detail": "Software.CH1-UI-Design.2_streamlit-sessionstate.wallet",
        "documentation": {}
    },
    {
        "label": "add_selectbox",
        "kind": 5,
        "importPath": "Software.CH1-UI-Design.3_streamlit-layout.test",
        "description": "Software.CH1-UI-Design.3_streamlit-layout.test",
        "peekOfCode": "add_selectbox = st.sidebar.selectbox(\n    \"How would you like to be contacted?\",\n    (\"Email\", \"Home phone\", \"Mobile phone\")\n)\nwith st.sidebar:\n    add_radio = st.radio(\n        \"Choose a shipping method\",\n        (\"Standard (5-15 days)\", \"Express (2-5 days)\")\n    )\n# Main content area",
        "detail": "Software.CH1-UI-Design.3_streamlit-layout.test",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "description": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "peekOfCode": "width = st.sidebar.number_input(\"Width\", min_value=100, max_value=1920, value=500)\nheight = st.sidebar.number_input(\"Height\", min_value=100, max_value=1080, value=500)\ngrayscale = st.sidebar.checkbox(\"Grayscale\")\nblur = st.sidebar.checkbox(\"Blur\")\n# Constructing the API URL based on user input\n# TODO: update_url\n# Fetching and displaying the image\nif st.sidebar.button(\"Fetch Image\"):\n    # TODO\n    response = requests.get(st.session_state['url'])",
        "detail": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "description": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "peekOfCode": "height = st.sidebar.number_input(\"Height\", min_value=100, max_value=1080, value=500)\ngrayscale = st.sidebar.checkbox(\"Grayscale\")\nblur = st.sidebar.checkbox(\"Blur\")\n# Constructing the API URL based on user input\n# TODO: update_url\n# Fetching and displaying the image\nif st.sidebar.button(\"Fetch Image\"):\n    # TODO\n    response = requests.get(st.session_state['url'])\n    if response.status_code == 200:",
        "detail": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "documentation": {}
    },
    {
        "label": "grayscale",
        "kind": 5,
        "importPath": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "description": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "peekOfCode": "grayscale = st.sidebar.checkbox(\"Grayscale\")\nblur = st.sidebar.checkbox(\"Blur\")\n# Constructing the API URL based on user input\n# TODO: update_url\n# Fetching and displaying the image\nif st.sidebar.button(\"Fetch Image\"):\n    # TODO\n    response = requests.get(st.session_state['url'])\n    if response.status_code == 200:\n        image = Image.open(BytesIO(response.content))",
        "detail": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "documentation": {}
    },
    {
        "label": "blur",
        "kind": 5,
        "importPath": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "description": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "peekOfCode": "blur = st.sidebar.checkbox(\"Blur\")\n# Constructing the API URL based on user input\n# TODO: update_url\n# Fetching and displaying the image\nif st.sidebar.button(\"Fetch Image\"):\n    # TODO\n    response = requests.get(st.session_state['url'])\n    if response.status_code == 200:\n        image = Image.open(BytesIO(response.content))\n        st.image(image, caption=\"Random Image from Lorem Picsum\")",
        "detail": "Software.CH2-API.1_api-basic.api-basic.lorempicsum",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "kind": 2,
        "importPath": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "description": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "peekOfCode": "def cosine_similarity(vec1, vec2):\n    dot_product = np.dot(vec1, vec2)\n    norm_vec1 = np.linalg.norm(vec1)\n    norm_vec2 = np.linalg.norm(vec2)\n    return dot_product / (norm_vec1 * norm_vec2)\n# CLIP 모델 불러오기\nmodel = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nprocessor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage = Image.open('./cat.jpg')",
        "detail": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "description": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "peekOfCode": "model = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nprocessor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage = Image.open('./cat.jpg')\n# 이미지 임베딩하기\nimage_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']",
        "detail": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "description": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "peekOfCode": "processor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage = Image.open('./cat.jpg')\n# 이미지 임베딩하기\nimage_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기",
        "detail": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "description": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "peekOfCode": "image = Image.open('./cat.jpg')\n# 이미지 임베딩하기\nimage_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기\ntext_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():",
        "detail": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "documentation": {}
    },
    {
        "label": "image_inputs",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "description": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "peekOfCode": "image_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기\ntext_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 각 텍스트의 코사인 유사도 계산",
        "detail": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "documentation": {}
    },
    {
        "label": "texts",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "description": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "peekOfCode": "texts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기\ntext_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 각 텍스트의 코사인 유사도 계산\nprint('=======================================')\nfor i in range(len(texts)):\n    similarity = cosine_similarity(image_embedding[0], text_embedding[i])\n    print(texts[i], ' : ', similarity)",
        "detail": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "documentation": {}
    },
    {
        "label": "text_inputs",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "description": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "peekOfCode": "text_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 각 텍스트의 코사인 유사도 계산\nprint('=======================================')\nfor i in range(len(texts)):\n    similarity = cosine_similarity(image_embedding[0], text_embedding[i])\n    print(texts[i], ' : ', similarity)\nprint('=======================================')",
        "detail": "Software.CH7-AI-Algorithms.clip.1_clip_example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "description": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "peekOfCode": "model = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nprocessor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage = Image.open('./cat.jpg')\n# 이미지 임베딩하기\nimage_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']",
        "detail": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "description": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "peekOfCode": "processor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage = Image.open('./cat.jpg')\n# 이미지 임베딩하기\nimage_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기",
        "detail": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "description": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "peekOfCode": "image = Image.open('./cat.jpg')\n# 이미지 임베딩하기\nimage_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기\ntext_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():",
        "detail": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "documentation": {}
    },
    {
        "label": "image_inputs",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "description": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "peekOfCode": "image_inputs = processor(images=image, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embedding = model.get_image_features(**image_inputs)\n# 텍스트 정의\ntexts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기\ntext_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 각 텍스트의 코사인 유사도 계산",
        "detail": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "documentation": {}
    },
    {
        "label": "texts",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "description": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "peekOfCode": "texts = ['A dog', 'A cat', 'A nuclear submarine']\n# 각 텍스트 임베딩하기\ntext_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 각 텍스트의 코사인 유사도 계산\nprint('=======================================')\nfor i in range(len(texts)):\n    similarity = cosine_similarity(image_embedding[0], text_embedding[i])\n    print(texts[i], ' : ', similarity)",
        "detail": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "documentation": {}
    },
    {
        "label": "text_inputs",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "description": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "peekOfCode": "text_inputs = processor(text=texts, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 각 텍스트의 코사인 유사도 계산\nprint('=======================================')\nfor i in range(len(texts)):\n    similarity = cosine_similarity(image_embedding[0], text_embedding[i])\n    print(texts[i], ' : ', similarity)\nprint('=======================================')",
        "detail": "Software.CH7-AI-Algorithms.clip.2_cosine_similarity",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "model = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nprocessor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimages = []\nimage_filenames = []\nfor i in range(9):\n    image_filenames.append('./topk-image/dog_'+str(i)+'.png')\n    images.append(Image.open(image_filenames[i]))\n# 이미지 임베딩\nimage_inputs = processor(images=images, return_tensors=\"pt\", padding=True)",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "processor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimages = []\nimage_filenames = []\nfor i in range(9):\n    image_filenames.append('./topk-image/dog_'+str(i)+'.png')\n    images.append(Image.open(image_filenames[i]))\n# 이미지 임베딩\nimage_inputs = processor(images=images, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "images = []\nimage_filenames = []\nfor i in range(9):\n    image_filenames.append('./topk-image/dog_'+str(i)+'.png')\n    images.append(Image.open(image_filenames[i]))\n# 이미지 임베딩\nimage_inputs = processor(images=images, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embeddings = model.get_image_features(**image_inputs)\n# 텍스트",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "image_filenames",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "image_filenames = []\nfor i in range(9):\n    image_filenames.append('./topk-image/dog_'+str(i)+'.png')\n    images.append(Image.open(image_filenames[i]))\n# 이미지 임베딩\nimage_inputs = processor(images=images, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embeddings = model.get_image_features(**image_inputs)\n# 텍스트\ntext = ['A dog is sleeping']",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "image_inputs",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "image_inputs = processor(images=images, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    image_embeddings = model.get_image_features(**image_inputs)\n# 텍스트\ntext = ['A dog is sleeping']\ntext_inputs = processor(text=text, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 코사인 유사도\nsimilarities = cosine_similarity(text_embedding, image_embeddings)",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "text = ['A dog is sleeping']\ntext_inputs = processor(text=text, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 코사인 유사도\nsimilarities = cosine_similarity(text_embedding, image_embeddings)\n# TOP-K 결과 찾기\nk = 3\ntop_3_indices = similarities.topk(k).indices\nprint(\"Top 3 most similar images:\")",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "text_inputs",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "text_inputs = processor(text=text, return_tensors=\"pt\", padding=True)\nwith torch.no_grad():\n    text_embedding = model.get_text_features(**text_inputs)\n# 코사인 유사도\nsimilarities = cosine_similarity(text_embedding, image_embeddings)\n# TOP-K 결과 찾기\nk = 3\ntop_3_indices = similarities.topk(k).indices\nprint(\"Top 3 most similar images:\")\nfor idx in top_3_indices:",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "similarities",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "similarities = cosine_similarity(text_embedding, image_embeddings)\n# TOP-K 결과 찾기\nk = 3\ntop_3_indices = similarities.topk(k).indices\nprint(\"Top 3 most similar images:\")\nfor idx in top_3_indices:\n    print(f\"- {image_filenames[idx]}\")",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "k = 3\ntop_3_indices = similarities.topk(k).indices\nprint(\"Top 3 most similar images:\")\nfor idx in top_3_indices:\n    print(f\"- {image_filenames[idx]}\")",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "top_3_indices",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "description": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "peekOfCode": "top_3_indices = similarities.topk(k).indices\nprint(\"Top 3 most similar images:\")\nfor idx in top_3_indices:\n    print(f\"- {image_filenames[idx]}\")",
        "detail": "Software.CH7-AI-Algorithms.clip.3_topk_image",
        "documentation": {}
    },
    {
        "label": "search_image_by_text",
        "kind": 2,
        "importPath": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "description": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "peekOfCode": "def search_image_by_text(text_prompt):\n    # 텍스트 임베딩\n    # TODO: 퀴즈 5 - 여기에 코드를 작성하시오.\n    print(f'Text Embedding\\'s shape: {text_embedding.shape}')\n    # 코사인 유사도\n    similarities = cosine_similarity(text_embedding, image_embeddings)\n    print('-----------------------------------------------------')\n    print(\"The most similar image found is: \", end='')\n    # TODO: 퀴즈 6 - 여기에 코드를 작성하시오.\n# -------------------------------------------------",
        "detail": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "documentation": {}
    },
    {
        "label": "text_embedding",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "description": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "peekOfCode": "text_embedding = torch.zeros(0)\nimage_embeddings = torch.zeros(0)\n# CLIP 모델 불러오기\nmodel = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nprocessor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage_filenames = [] # 이미지 파일 경로 200개를 저장\nimages = [] # 이미지 객체 200개를 저장\nfor i in range(200):\n    pass",
        "detail": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "documentation": {}
    },
    {
        "label": "image_embeddings",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "description": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "peekOfCode": "image_embeddings = torch.zeros(0)\n# CLIP 모델 불러오기\nmodel = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nprocessor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage_filenames = [] # 이미지 파일 경로 200개를 저장\nimages = [] # 이미지 객체 200개를 저장\nfor i in range(200):\n    pass\n    # 이미지 파일 경로를 파악하여 image_filenames 생성",
        "detail": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "description": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "peekOfCode": "model = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nprocessor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage_filenames = [] # 이미지 파일 경로 200개를 저장\nimages = [] # 이미지 객체 200개를 저장\nfor i in range(200):\n    pass\n    # 이미지 파일 경로를 파악하여 image_filenames 생성\n    # TODO: 퀴즈 3 - 여기에 코드를 작성하시오.\nfor i in range(len(image_filenames)):",
        "detail": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "description": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "peekOfCode": "processor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n# 이미지 불러오기\nimage_filenames = [] # 이미지 파일 경로 200개를 저장\nimages = [] # 이미지 객체 200개를 저장\nfor i in range(200):\n    pass\n    # 이미지 파일 경로를 파악하여 image_filenames 생성\n    # TODO: 퀴즈 3 - 여기에 코드를 작성하시오.\nfor i in range(len(image_filenames)):\n    image = Image.open(image_filenames[i])",
        "detail": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "documentation": {}
    },
    {
        "label": "image_filenames",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "description": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "peekOfCode": "image_filenames = [] # 이미지 파일 경로 200개를 저장\nimages = [] # 이미지 객체 200개를 저장\nfor i in range(200):\n    pass\n    # 이미지 파일 경로를 파악하여 image_filenames 생성\n    # TODO: 퀴즈 3 - 여기에 코드를 작성하시오.\nfor i in range(len(image_filenames)):\n    image = Image.open(image_filenames[i])\n    images.append(image)\nprint(f'Total {len(images)} images are loaded!')",
        "detail": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "description": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "peekOfCode": "images = [] # 이미지 객체 200개를 저장\nfor i in range(200):\n    pass\n    # 이미지 파일 경로를 파악하여 image_filenames 생성\n    # TODO: 퀴즈 3 - 여기에 코드를 작성하시오.\nfor i in range(len(image_filenames)):\n    image = Image.open(image_filenames[i])\n    images.append(image)\nprint(f'Total {len(images)} images are loaded!')\n# 이미지 임베딩",
        "detail": "Software.CH7-AI-Algorithms.clip.quiz_search",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "peekOfCode": "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertModel.from_pretrained('bert-base-uncased')\n# 문장 정의\nsentence = \"I love reading books.\"\n# 문장을 토큰으로 변환 및 BERT 입력 형식으로 변환\ninputs = tokenizer(sentence, return_tensors='pt')\n# BERT 모델을 통해 임베딩 벡터 얻기\nwith torch.no_grad():\n    outputs = model(**inputs)\n# 임베딩 벡터 추출",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "peekOfCode": "model = BertModel.from_pretrained('bert-base-uncased')\n# 문장 정의\nsentence = \"I love reading books.\"\n# 문장을 토큰으로 변환 및 BERT 입력 형식으로 변환\ninputs = tokenizer(sentence, return_tensors='pt')\n# BERT 모델을 통해 임베딩 벡터 얻기\nwith torch.no_grad():\n    outputs = model(**inputs)\n# 임베딩 벡터 추출\nembedding_vector = outputs.last_hidden_state.mean(dim=1)",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "peekOfCode": "sentence = \"I love reading books.\"\n# 문장을 토큰으로 변환 및 BERT 입력 형식으로 변환\ninputs = tokenizer(sentence, return_tensors='pt')\n# BERT 모델을 통해 임베딩 벡터 얻기\nwith torch.no_grad():\n    outputs = model(**inputs)\n# 임베딩 벡터 추출\nembedding_vector = outputs.last_hidden_state.mean(dim=1)\nprint(\"임베딩 벡터:\", embedding_vector)",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "documentation": {}
    },
    {
        "label": "inputs",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "peekOfCode": "inputs = tokenizer(sentence, return_tensors='pt')\n# BERT 모델을 통해 임베딩 벡터 얻기\nwith torch.no_grad():\n    outputs = model(**inputs)\n# 임베딩 벡터 추출\nembedding_vector = outputs.last_hidden_state.mean(dim=1)\nprint(\"임베딩 벡터:\", embedding_vector)",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "documentation": {}
    },
    {
        "label": "embedding_vector",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "peekOfCode": "embedding_vector = outputs.last_hidden_state.mean(dim=1)\nprint(\"임베딩 벡터:\", embedding_vector)",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.embedding",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "kind": 2,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "def cosine_similarity(vec1, vec2):\n    pass\n    # TODO: 퀴즈 1 정답 입력\n# 임베딩할 단어 리스트\ncategories = ['fruit', 'vehicle', 'animal', 'tool', 'electronic device', 'sport', 'profession', 'emotion', 'planet', 'musical_instrument']\n# BERT 모델 및 토크나이저 불러오기\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertModel.from_pretrained('bert-base-uncased')\n# 단어 임베딩 벡터를 저장할 리스트\nembedding_vectors = []",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "categories = ['fruit', 'vehicle', 'animal', 'tool', 'electronic device', 'sport', 'profession', 'emotion', 'planet', 'musical_instrument']\n# BERT 모델 및 토크나이저 불러오기\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertModel.from_pretrained('bert-base-uncased')\n# 단어 임베딩 벡터를 저장할 리스트\nembedding_vectors = []\n# 각 단어를 임베딩 벡터로 변환하고 embedding_vectors에 저장\nfor word in categories:\n    pass\n    # TODO: 퀴즈 2 정답 입력",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertModel.from_pretrained('bert-base-uncased')\n# 단어 임베딩 벡터를 저장할 리스트\nembedding_vectors = []\n# 각 단어를 임베딩 벡터로 변환하고 embedding_vectors에 저장\nfor word in categories:\n    pass\n    # TODO: 퀴즈 2 정답 입력\n# 사용자 입력 받기\nuser_input = input(\"텍스트를 입력하세요: \")",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "model = BertModel.from_pretrained('bert-base-uncased')\n# 단어 임베딩 벡터를 저장할 리스트\nembedding_vectors = []\n# 각 단어를 임베딩 벡터로 변환하고 embedding_vectors에 저장\nfor word in categories:\n    pass\n    # TODO: 퀴즈 2 정답 입력\n# 사용자 입력 받기\nuser_input = input(\"텍스트를 입력하세요: \")\n# 입력된 단어(user_input)를 임베딩 벡터로 변환",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "embedding_vectors",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "embedding_vectors = []\n# 각 단어를 임베딩 벡터로 변환하고 embedding_vectors에 저장\nfor word in categories:\n    pass\n    # TODO: 퀴즈 2 정답 입력\n# 사용자 입력 받기\nuser_input = input(\"텍스트를 입력하세요: \")\n# 입력된 단어(user_input)를 임베딩 벡터로 변환\n# TODO: 여기에 코드를 작성하게요.\n# 코사인 유사도를 통해 입력된 단어와 각 카테고리의 유사도 계산",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "user_input = input(\"텍스트를 입력하세요: \")\n# 입력된 단어(user_input)를 임베딩 벡터로 변환\n# TODO: 여기에 코드를 작성하게요.\n# 코사인 유사도를 통해 입력된 단어와 각 카테고리의 유사도 계산\nsimilarities = []\n# TODO: 여기에 코드를 작성하세요.\n# 유사도가 가장 높은 카테고리 선택\nmax_index = np.argmax(similarities)\npredicted_category = categories[max_index]\n# 결과 출력",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "similarities",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "similarities = []\n# TODO: 여기에 코드를 작성하세요.\n# 유사도가 가장 높은 카테고리 선택\nmax_index = np.argmax(similarities)\npredicted_category = categories[max_index]\n# 결과 출력\nprint(f\"입력한 단어 '{user_input}'는 '{predicted_category}' 카테고리와 가장 유사합니다.\")\nprint('유사도 결과')\nfor i in range(len(categories)):\n    print(f'- {categories[i]}: {similarities[i]}' )",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "max_index",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "max_index = np.argmax(similarities)\npredicted_category = categories[max_index]\n# 결과 출력\nprint(f\"입력한 단어 '{user_input}'는 '{predicted_category}' 카테고리와 가장 유사합니다.\")\nprint('유사도 결과')\nfor i in range(len(categories)):\n    print(f'- {categories[i]}: {similarities[i]}' )",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "predicted_category",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "description": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "peekOfCode": "predicted_category = categories[max_index]\n# 결과 출력\nprint(f\"입력한 단어 '{user_input}'는 '{predicted_category}' 카테고리와 가장 유사합니다.\")\nprint('유사도 결과')\nfor i in range(len(categories)):\n    print(f'- {categories[i]}: {similarities[i]}' )",
        "detail": "Software.CH7-AI-Algorithms.embedding-vector.quiz",
        "documentation": {}
    },
    {
        "label": "plot_dataset",
        "kind": 2,
        "importPath": "Software.CH7-AI-Algorithms.knn.knn",
        "description": "Software.CH7-AI-Algorithms.knn.knn",
        "peekOfCode": "def plot_dataset(X, y):\n    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=\"viridis\", s=50, edgecolor=\"k\")\n    plt.xlabel(\"Feature 1\")\n    plt.ylabel(\"Feature 2\")\n    plt.title(\"Dataset\")\n    plt.show()\nplot_dataset(X, y)\n# Step 3: Define a function to calculate the Euclidean distance\ndef euclidean_distance(point1, point2):\n    # Implement the Euclidean distance formula",
        "detail": "Software.CH7-AI-Algorithms.knn.knn",
        "documentation": {}
    },
    {
        "label": "euclidean_distance",
        "kind": 2,
        "importPath": "Software.CH7-AI-Algorithms.knn.knn",
        "description": "Software.CH7-AI-Algorithms.knn.knn",
        "peekOfCode": "def euclidean_distance(point1, point2):\n    # Implement the Euclidean distance formula\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n# Step 4: Implement the KNN function\ndef knn(X_train, y_train, new_point, k=3):\n    # 1. Calculate distances between new_point and each point in X_train\n    distances = []\n    for i in range(len(X_train)):\n        # Calculate the distance from new_point to X_train[i]\n        dist = euclidean_distance(new_point, X_train[i])",
        "detail": "Software.CH7-AI-Algorithms.knn.knn",
        "documentation": {}
    },
    {
        "label": "knn",
        "kind": 2,
        "importPath": "Software.CH7-AI-Algorithms.knn.knn",
        "description": "Software.CH7-AI-Algorithms.knn.knn",
        "peekOfCode": "def knn(X_train, y_train, new_point, k=3):\n    # 1. Calculate distances between new_point and each point in X_train\n    distances = []\n    for i in range(len(X_train)):\n        # Calculate the distance from new_point to X_train[i]\n        dist = euclidean_distance(new_point, X_train[i])\n        distances.append((dist, y_train[i]))  # Save distance and label\n    # 2. Sort distances (ascending) and select the top-k closest neighbors\n    # Sort distances and take the first k neighbors\n    distances.sort(key=lambda x: x[0])",
        "detail": "Software.CH7-AI-Algorithms.knn.knn",
        "documentation": {}
    },
    {
        "label": "plot_knn_steps",
        "kind": 2,
        "importPath": "Software.CH7-AI-Algorithms.knn.knn",
        "description": "Software.CH7-AI-Algorithms.knn.knn",
        "peekOfCode": "def plot_knn_steps(X, y, k, new_point):\n    plt.figure(figsize=(10, 6))\n    # Plot the dataset\n    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=\"viridis\", s=50, edgecolor=\"k\", label=\"Data points\")\n    # Plot the new point in red\n    plt.scatter(new_point[0], new_point[1], c=\"red\", s=100, label=\"New point\", marker=\"x\")\n    # Find the k nearest neighbors using our KNN function\n    distances = []\n    for i in range(len(X)):\n        dist = euclidean_distance(new_point, X[i])",
        "detail": "Software.CH7-AI-Algorithms.knn.knn",
        "documentation": {}
    },
    {
        "label": "new_point",
        "kind": 5,
        "importPath": "Software.CH7-AI-Algorithms.knn.knn",
        "description": "Software.CH7-AI-Algorithms.knn.knn",
        "peekOfCode": "new_point = [0, -6]\nplot_knn_steps",
        "detail": "Software.CH7-AI-Algorithms.knn.knn",
        "documentation": {}
    },
    {
        "label": "convolve",
        "kind": 2,
        "importPath": "dump.blur",
        "description": "dump.blur",
        "peekOfCode": "def convolve(image, kernel):\n    \"\"\"Applies a convolution operation on an image with the given kernel.\"\"\"\n    image_array = [[pixel for pixel in row] for row in image.getdata()]  # Convert image to a 2D list\n    width, height = image.size\n    image_array = [image_array[i * width:(i + 1) * width] for i in range(height)]\n    kernel_height = len(kernel)\n    kernel_width = len(kernel[0])\n    pad_h = kernel_height // 2\n    pad_w = kernel_width // 2\n    # Pad the image to handle edges",
        "detail": "dump.blur",
        "documentation": {}
    },
    {
        "label": "gaussian_blur_kernel",
        "kind": 2,
        "importPath": "dump.blur",
        "description": "dump.blur",
        "peekOfCode": "def gaussian_blur_kernel(size=3, sigma=1.0):\n    \"\"\"Generates a Gaussian blur kernel.\"\"\"\n    ax = [(x - size // 2) for x in range(size)]\n    kernel = [[0] * size for _ in range(size)]\n    sum_value = 0\n    for i in range(size):\n        for j in range(size):\n            value = (1 / (2.0 * 3.141592653589793 * sigma**2)) * (2.718281828459045 ** (-(ax[i]**2 + ax[j]**2) / (2.0 * sigma**2)))\n            kernel[i][j] = value\n            sum_value += value",
        "detail": "dump.blur",
        "documentation": {}
    },
    {
        "label": "sobel_edge_detection_kernel",
        "kind": 2,
        "importPath": "dump.blur",
        "description": "dump.blur",
        "peekOfCode": "def sobel_edge_detection_kernel():\n    \"\"\"Returns Sobel kernels for edge detection in x and y directions.\"\"\"\n    sobel_x = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]\n    sobel_y = [[-1, -2, -1], [0, 0, 0], [1, 2, 1]]\n    return sobel_x, sobel_y\n# Example usage\nif __name__ == \"__main__\":\n    image = Image.open(\"lena.png\").convert(\"L\")  # Open image and convert to grayscale\n    # Gaussian Blur\n    gaussian_kernel = gaussian_blur_kernel(size=5, sigma=1.5)",
        "detail": "dump.blur",
        "documentation": {}
    },
    {
        "label": "print_title",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def print_title():\n    pass\n    # --------------------------------------------------\n    # TODO: https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20\n    # 이 프로그램의 타이틀을 정한다.\n    # 위 웹사이트 들어가서 타이틀을 이쁜 스타일로 만들어준다.\n    # 프린트 한다.\n    # --------------------------------------------------\ndef add(x, y):\n    pass",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def add(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------\ndef subtract(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def subtract(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------\ndef multiply(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def multiply(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------\ndef divide(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO : 0으로 나눌 경우 \"Error\"를 return 하고, 그 외의 경우에는 나눈 값을 return\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def divide(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO : 0으로 나눌 경우 \"Error\"를 return 하고, 그 외의 경우에는 나눈 값을 return\n    # --------------------------------------------------\ndef modulus(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "modulus",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def modulus(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------\ndef exponent(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "exponent",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def exponent(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO\n    # --------------------------------------------------\ndef factorial(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 0보다 작은 수가 오는 경우 \"Error\"를 return 하고, 그 외의 경우에는 적절한 값을 return\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def factorial(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 0보다 작은 수가 오는 경우 \"Error\"를 return 하고, 그 외의 경우에는 적절한 값을 return\n    # --------------------------------------------------\ndef fibonacci(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 0보다 작은 수가 오는 경우 \"Error\"를 return 하고, 그 외의 경우에는 적절한 값을 return",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def fibonacci(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 0보다 작은 수가 오는 경우 \"Error\"를 return 하고, 그 외의 경우에는 적절한 값을 return\n    # --------------------------------------------------\ndef decimal_to_binary(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 자연수 -> 이진수\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "decimal_to_binary",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def decimal_to_binary(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 자연수 -> 이진수\n    # --------------------------------------------------\ndef gcd(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO : 최대공약수\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def gcd(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO : 최대공약수\n    # --------------------------------------------------\ndef lcm(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO : 최소공배수\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "lcm",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def lcm(x, y):\n    pass\n    # --------------------------------------------------\n    # TODO : 최소공배수\n    # --------------------------------------------------\ndef is_prime(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 소수인지 아닌지 확인. \n    # Hint : return 값이 무엇인지는 함수의 사용법을 보고 알아낼 것.",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def is_prime(n):\n    pass\n    # --------------------------------------------------\n    # TODO : 소수인지 아닌지 확인. \n    # Hint : return 값이 무엇인지는 함수의 사용법을 보고 알아낼 것.\n    # --------------------------------------------------\ndef binary_to_decimal(b):\n    pass\n    # --------------------------------------------------\n    # TODO : 이진수 -> 자연수",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "binary_to_decimal",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def binary_to_decimal(b):\n    pass\n    # --------------------------------------------------\n    # TODO : 이진수 -> 자연수\n    # --------------------------------------------------\ndef round_number(n, digits):\n    pass\n    # --------------------------------------------------\n    # TODO : digits 번째 자리수에서 반올림\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "round_number",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def round_number(n, digits):\n    pass\n    # --------------------------------------------------\n    # TODO : digits 번째 자리수에서 반올림\n    # --------------------------------------------------\ndef ceil_number(n):\n    pass\n    # --------------------------------------------------\n    # TODO : digits 번째 자리수에서 올림\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "ceil_number",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def ceil_number(n):\n    pass\n    # --------------------------------------------------\n    # TODO : digits 번째 자리수에서 올림\n    # --------------------------------------------------\ndef floor_number(n):\n    pass\n    # --------------------------------------------------\n    # TODO : digits 번째 자리수에서 올림\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "floor_number",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def floor_number(n):\n    pass\n    # --------------------------------------------------\n    # TODO : digits 번째 자리수에서 올림\n    # --------------------------------------------------\ndef print_calculation_history():\n    pass\n    # --------------------------------------------------\n    # TODO: 전체 calcuation_history를 한줄씩 프린트한다.\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "print_calculation_history",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def print_calculation_history():\n    pass\n    # --------------------------------------------------\n    # TODO: 전체 calcuation_history를 한줄씩 프린트한다.\n    # --------------------------------------------------\ndef print_nth_calculation_history(n):\n    pass\n    # --------------------------------------------------\n    # TODO: n번째 calcuation_history를 한줄씩 프린트한다. / 만약 n번째 계산 결과가 존재하지 않는다면 \"Error\"\n    # --------------------------------------------------",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "print_nth_calculation_history",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def print_nth_calculation_history(n):\n    pass\n    # --------------------------------------------------\n    # TODO: n번째 calcuation_history를 한줄씩 프린트한다. / 만약 n번째 계산 결과가 존재하지 않는다면 \"Error\"\n    # --------------------------------------------------\ndef main():\n    print_title()\n    while True:\n        print('---------------------------------------------')\n        print(\"\\nSelect operation:\")",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "def main():\n    print_title()\n    while True:\n        print('---------------------------------------------')\n        print(\"\\nSelect operation:\")\n        print(\"1. Add\")\n        print(\"2. Subtract\")\n        print(\"3. Multiply\")\n        print(\"4. Divide\")\n        print(\"5. Modulus\")",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "calculation_history",
        "kind": 5,
        "importPath": "dump.calculator",
        "description": "dump.calculator",
        "peekOfCode": "calculation_history = []\ndef print_title():\n    pass\n    # --------------------------------------------------\n    # TODO: https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20\n    # 이 프로그램의 타이틀을 정한다.\n    # 위 웹사이트 들어가서 타이틀을 이쁜 스타일로 만들어준다.\n    # 프린트 한다.\n    # --------------------------------------------------\ndef add(x, y):",
        "detail": "dump.calculator",
        "documentation": {}
    },
    {
        "label": "print_title",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def print_title():\n    # --------------------------------------------------\n    # Title generated from the given website:\n    title = \"\"\"\n_________        .__  _________       .__   \n\\_   ___ \\_____  |  | \\_   ___ \\ __ __|  |  \n/    \\  \\/\\__  \\ |  | /    \\  \\/|  |  \\  |  \n\\     \\____/ __ \\|  |_\\     \\___|  |  /  |__\n \\______  (____  /____/\\______  /____/|____/\n        \\/     \\/             \\/            ",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def add(x, y):\n    return x + y\ndef subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return \"Error\" if y == 0 else x / y\ndef modulus(x, y):\n    return x % y",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return \"Error\" if y == 0 else x / y\ndef modulus(x, y):\n    return x % y\ndef exponent(x, y):\n    return x ** y",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return \"Error\" if y == 0 else x / y\ndef modulus(x, y):\n    return x % y\ndef exponent(x, y):\n    return x ** y\ndef factorial(n):\n    return \"Error\" if n < 0 else math.factorial(n)",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def divide(x, y):\n    return \"Error\" if y == 0 else x / y\ndef modulus(x, y):\n    return x % y\ndef exponent(x, y):\n    return x ** y\ndef factorial(n):\n    return \"Error\" if n < 0 else math.factorial(n)\ndef fibonacci(n):\n    if n < 0:",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "modulus",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def modulus(x, y):\n    return x % y\ndef exponent(x, y):\n    return x ** y\ndef factorial(n):\n    return \"Error\" if n < 0 else math.factorial(n)\ndef fibonacci(n):\n    if n < 0:\n        return \"Error\"\n    a, b = 0, 1",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "exponent",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def exponent(x, y):\n    return x ** y\ndef factorial(n):\n    return \"Error\" if n < 0 else math.factorial(n)\ndef fibonacci(n):\n    if n < 0:\n        return \"Error\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def factorial(n):\n    return \"Error\" if n < 0 else math.factorial(n)\ndef fibonacci(n):\n    if n < 0:\n        return \"Error\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\ndef decimal_to_binary(n):",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def fibonacci(n):\n    if n < 0:\n        return \"Error\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\ndef decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\ndef gcd(x, y):",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "decimal_to_binary",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\ndef gcd(x, y):\n    return math.gcd(x, y)\ndef lcm(x, y):\n    return abs(x * y) // math.gcd(x, y)\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def gcd(x, y):\n    return math.gcd(x, y)\ndef lcm(x, y):\n    return abs(x * y) // math.gcd(x, y)\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "lcm",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def lcm(x, y):\n    return abs(x * y) // math.gcd(x, y)\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef binary_to_decimal(b):",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef binary_to_decimal(b):\n    return int(b, 2)\ndef round_number(n, digits):",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "binary_to_decimal",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def binary_to_decimal(b):\n    return int(b, 2)\ndef round_number(n, digits):\n    factor = 10 ** (digits-1)\n    if (n // factor) % 10 >= 5:\n        return ((n // (factor*10))+1) * (factor*10)\n    else:\n        return ((n // (factor*10))) * (factor*10)\ndef ceil_number(n, digits):\n    factor = 10 ** digits",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "round_number",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def round_number(n, digits):\n    factor = 10 ** (digits-1)\n    if (n // factor) % 10 >= 5:\n        return ((n // (factor*10))+1) * (factor*10)\n    else:\n        return ((n // (factor*10))) * (factor*10)\ndef ceil_number(n, digits):\n    factor = 10 ** digits\n    return math.ceil(n / factor) * factor\ndef floor_number(n, digits):",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "ceil_number",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def ceil_number(n, digits):\n    factor = 10 ** digits\n    return math.ceil(n / factor) * factor\ndef floor_number(n, digits):\n    factor = 10 ** digits\n    return math.floor(n / factor) * factor\ndef print_calculation_history():\n    for entry in calculation_history:\n        print(entry)\ndef print_nth_calculation_history(n):",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "floor_number",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def floor_number(n, digits):\n    factor = 10 ** digits\n    return math.floor(n / factor) * factor\ndef print_calculation_history():\n    for entry in calculation_history:\n        print(entry)\ndef print_nth_calculation_history(n):\n    if 0 <= n < len(calculation_history):\n        print(calculation_history[n])\n    else:",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "print_calculation_history",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def print_calculation_history():\n    for entry in calculation_history:\n        print(entry)\ndef print_nth_calculation_history(n):\n    if 0 <= n < len(calculation_history):\n        print(calculation_history[n])\n    else:\n        print(\"Error: Index out of range\")\ndef main():\n    print_title()",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "print_nth_calculation_history",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def print_nth_calculation_history(n):\n    if 0 <= n < len(calculation_history):\n        print(calculation_history[n])\n    else:\n        print(\"Error: Index out of range\")\ndef main():\n    print_title()\n    while True:\n        print('---------------------------------------------')\n        print(\"\\nSelect operation:\")",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "def main():\n    print_title()\n    while True:\n        print('---------------------------------------------')\n        print(\"\\nSelect operation:\")\n        print(\"1. Add\")\n        print(\"2. Subtract\")\n        print(\"3. Multiply\")\n        print(\"4. Divide\")\n        print(\"5. Modulus\")",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "calculation_history",
        "kind": 5,
        "importPath": "dump.calculator_answer",
        "description": "dump.calculator_answer",
        "peekOfCode": "calculation_history = []\ndef print_title():\n    # --------------------------------------------------\n    # Title generated from the given website:\n    title = \"\"\"\n_________        .__  _________       .__   \n\\_   ___ \\_____  |  | \\_   ___ \\ __ __|  |  \n/    \\  \\/\\__  \\ |  | /    \\  \\/|  |  \\  |  \n\\     \\____/ __ \\|  |_\\     \\___|  |  /  |__\n \\______  (____  /____/\\______  /____/|____/",
        "detail": "dump.calculator_answer",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "dump.project",
        "description": "dump.project",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n# Square size\nSQUARE_SIZE = 50\n# Create the display\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Click to Draw Squares\")\n# Fill the background\nscreen.fill(WHITE)\n# Game loop",
        "detail": "dump.project",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "dump.project",
        "description": "dump.project",
        "peekOfCode": "BLACK = (0, 0, 0)\n# Square size\nSQUARE_SIZE = 50\n# Create the display\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Click to Draw Squares\")\n# Fill the background\nscreen.fill(WHITE)\n# Game loop\nwhile True:",
        "detail": "dump.project",
        "documentation": {}
    },
    {
        "label": "SQUARE_SIZE",
        "kind": 5,
        "importPath": "dump.project",
        "description": "dump.project",
        "peekOfCode": "SQUARE_SIZE = 50\n# Create the display\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Click to Draw Squares\")\n# Fill the background\nscreen.fill(WHITE)\n# Game loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:  # Exit the program",
        "detail": "dump.project",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "dump.project",
        "description": "dump.project",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Click to Draw Squares\")\n# Fill the background\nscreen.fill(WHITE)\n# Game loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:  # Exit the program\n            pygame.quit()\n            sys.exit()",
        "detail": "dump.project",
        "documentation": {}
    }
]